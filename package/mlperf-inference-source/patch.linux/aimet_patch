diff --git a/vision/classification_and_detection/python/coco.py b/vision/classification_and_detection/python/coco.py
index 4080158..b3f8cc8 100644
--- a/vision/classification_and_detection/python/coco.py
+++ b/vision/classification_and_detection/python/coco.py
@@ -11,8 +11,8 @@ import time
 
 import cv2
 import numpy as np
-from pycocotools.cocoeval import COCOeval
-import pycoco
+#from pycocotools.cocoeval import COCOeval
+#import pycoco
 import dataset
 
 logging.basicConfig(level=logging.INFO)
@@ -72,7 +72,7 @@ class Coco(dataset.Dataset):
             i["bbox"].append(a.get("bbox"))
 
         for image_id, img in images.items():
-            image_name = os.path.join("val2017", img["file_name"])
+            image_name = os.path.join( img["file_name"])
             src = os.path.join(data_path, image_name)
             if not os.path.exists(src):
                 # if the image does not exists ignore it
diff --git a/vision/classification_and_detection/python/dataset.py b/vision/classification_and_detection/python/dataset.py
index 597c751..94226a1 100755
--- a/vision/classification_and_detection/python/dataset.py
+++ b/vision/classification_and_detection/python/dataset.py
@@ -203,7 +203,7 @@ def pre_process_mobilenet(img, dims=None, need_transpose=False):
 
 
 def maybe_resize(img, dims):
-    img = np.array(img, dtype=np.float32)
+    #img = np.array(img, dtype=np.float32)
     if len(img.shape) < 3 or img.shape[2] != 3:
         # some images might be grayscale
         img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
@@ -235,6 +235,7 @@ def pre_process_coco_pt_mobilenet(img, dims=None, need_transpose=False):
 
 def pre_process_coco_resnet34(img, dims=None, need_transpose=False):
     img = maybe_resize(img, dims)
+    img = np.array(img, dtype=np.float32)
     mean = np.array([0.485, 0.456, 0.406], dtype=np.float32)
     std = np.array([0.229, 0.224, 0.225], dtype=np.float32)
 
@@ -250,6 +251,7 @@ def pre_process_coco_resnet34(img, dims=None, need_transpose=False):
 def pre_process_coco_resnet34_tf(img, dims=None, need_transpose=False):
     img = maybe_resize(img, dims)
     mean = np.array([123.68, 116.78, 103.94], dtype=np.float32)
+    img = np.array(img, dtype=np.float32)
     img = img - mean
     if need_transpose:
         img = img.transpose([2, 0, 1])
